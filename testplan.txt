To test our sorted-list, we created a Comparator/Destructor function for both ints and strings. This allowed us to emulate how a user implementing SL would try our program. As long as the Comparator function supplied by the user follows the implementation outlined in the PDF (-1, if left item parameter is less than right, 0 if equal, 1 otherwise), our SL should work properly. 
We created 2 different sorted lists, one of ints and the other of string. We encoded in our main a function that calls on SLInsert and upon successful insertion of void* data, the console would output "IT WAS INSERTED", upon unsuccessful insertion (duplicate data), the console outputted "IT DIDN'T INSERT". After verifying that SLInsert correctly inserted/rejected data, we printed the sorted lists from head to tail to verify that the data was entered correctly. 
To test iterators, we created two iterators, one for each sorted list. We would print the Iterator's current node's data to console to verify that SLGetItem() and SLNextItem() were functioning properly. 
After the removal of a node in the sorted list, we would print the list again to make sure the list is correct. We also left an iterator on the removed node to test the calling of the DestructFuncT. By using GDB, we saw that when the node's number of pointers dropped to zero, the destruct function was called. 
After all testing, we called SLDestroy() and SLDestroyIterator().
